// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User{
  id Int @id @default(autoincrement())
  userId String @unique
  email String
  name String
  picture String?
  roles String[]
  created_at DateTime  @default(now())
  updated_at DateTime @updatedAt
  last_login DateTime?
  geofences Geofence[] @relation("ManagerGeofences")
  shifts Shift[] @relation("WorkerShift")
}

model Geofence{
  id Int @id @default(autoincrement())
  name String 
  managerId Int
  center Unsupported("geography(Point,4326)")
  radiusMeters Float @map("radius_meters")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
  manager User @relation("ManagerGeofences", fields:[managerId], references: [id])
  clock_in_shifts Shift[] @relation("ClockInGeofence")
  clock_out_shifts Shift[] @relation("ClockOutGeofence")
  @@unique([name, managerId])
}

model Shift{
  id Int @id @default(autoincrement())
  workerId Int
  date DateTime @db.Date
  clock_in_geofenceId Int
  clock_in_location String
  clock_out_geofenceId Int?
  clock_out_location String?
  clock_in DateTime 
  clock_out DateTime? 
  clock_in_note String?
  clock_out_note String?
  worker User @relation("WorkerShift", fields: [workerId], references: [id])
  clock_in_geofence Geofence? @relation("ClockInGeofence", fields: [clock_in_geofenceId], references: [id])
  clock_out_geofence Geofence? @relation("ClockOutGeofence", fields: [clock_out_geofenceId], references: [id])
  @@index([workerId]) 
}